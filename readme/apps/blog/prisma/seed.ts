import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fillDb() {
  await prisma.status.upsert({
    where: { id: 1 },
    update: {},
    create: {
      title: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞',
      posts: {
        create: [
          {
            textPosts:{
              create:[
                {
                  title: '–•—É–¥–µ—é—â–∏–π',
                  userId: '13',
                  text: '–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç—Ä–∞—à–Ω—ã–π —Ä–æ–º–∞–Ω ¬´–•—É–¥–µ—é—â–∏–π¬ª.',
                  announceText: '–ù–∞ –º–æ–π –≤–∑–≥–ª—è–¥, —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —Å—Ç—Ä–∞—à–Ω—ã—Ö —Ä–æ–º–∞–Ω–æ–≤ –°—Ç–∏–≤–µ–Ω–∞ –ö–∏–Ω–≥–∞.',
                  tags: '–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–∏–≥—É',
                }
              ]
            }
          },
        ]
      },
    }
  });
  console.info('ü§òÔ∏è Database was filled')
}

fillDb()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (err) => {
    console.error(err);
    await prisma.$disconnect()

    process.exit(1);
  })

  // title: '–•—É–¥–µ—é—â–∏–π',
  //           userId: '13',
  //           text: '–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç—Ä–∞—à–Ω—ã–π —Ä–æ–º–∞–Ω ¬´–•—É–¥–µ—é—â–∏–π¬ª.',
  //           announceText: '–ù–∞ –º–æ–π –≤–∑–≥–ª—è–¥, —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —Å—Ç—Ä–∞—à–Ω—ã—Ö —Ä–æ–º–∞–Ω–æ–≤ –°—Ç–∏–≤–µ–Ω–∞ –ö–∏–Ω–≥–∞.',
  //           tags: '–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–∏–≥—É',
